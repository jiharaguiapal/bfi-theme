==========================================================================================================================
FOR THE CLIENT SIDE
==========================================================================================================================

npm i --save socket.io-client

Note:
    • socket.on will receive the notifications data
    • socket.emit will trigger the notifications and pass data at the same time
    • socket.on is idealy put inside the "created" hook. This will initialize the use of socket.io like a setInterval
==========================================================================================================================
import io from "socket.io-client";

data() {
    return {
        sample_data_object_her: []
    }
}
created() {
    this.socket = io.connect(http://webhost:port, { secure: true}); // to connect to server
    this.socket.on("sample_string_matcher", sample_object_data => { // this will receive the notifs
        alert(sample_object_data);
    });
},
methods: {
    sample_method() {
        this.sample_data_object_her.push(
            {
                date: "when the was the action, done",
                action: "what was the action",
                user: "who did the action",
                entity: "to whom the action was made"
            }
        );
        this.socket = io.connect(http://webhost:port, { secure: true}); // to connect to server

        this.socket.emit("sample_string_matcher", this.sample_data_object_here );  // this will trigger to send notifs

        // You can also add API route here to record the notification using axios
    }
}

==========================================================================================================================
FOR THE SERVER SIDE
==========================================================================================================================

npm i --save socket.io

Note:
    • This js file must be placed along with the APIs (inside the usecase folder) 
    • ledsDb is the database name
    • sample_string_matcher should be used to match the sockets
    • you can either store the notification data in the db through here or in the client side (would need API route)
==========================================================================================================================

const webSocket = ({ ledsDb, io }) => {

    return function socket(info) {

        io.on("connection", (socket) => {

            console.log("Someone has connected.");

            socket.on("sample_string_matcher", async (data) => {

                // insert to db
                const toInsert = {
                    triggeredThru: `Turn on using app.`,
                };
                await ledsDb.insertLedLogs({ toInsert });

                // emit to all client that led is on;
                const toEmit = {
                    value: 1,
                };

                io.emit("sample_string_matcher", toEmit);
            });

        });

    };

};

module.exports = webSocket;
====================================================================================================================